library(caret)
library(MLeval)
library(qpcR)
library(readxl)
library(dplyr)
library(ggplot2)
library(GGally)
library(pROC)
library(gbm)
set.seed(500)
## DATA set up for LASSO TRAIN
lasso_data <- read_excel("~/Desktop/Michael Zhang/mb_t1_t2_3way.xlsx")
lasso_data[,"molec_id"]  <- NULL
lasso_data[,"seg_id"]  <- NULL
lasso_data[,"dx_date"]  <- NULL
lasso_data[,"alive"]  <- NULL
lasso_data[,"os"]  <- NULL
lasso_data[,"pfs"]  <- NULL
lasso_data$sex[lasso_data$sex == "M"] <- "0"
lasso_data$sex[lasso_data$sex == "F"] <- "1"
lasso_data$sex <- as.factor(lasso_data$sex)
#View(lasso_data)
#lasso_data<-lasso_data[!(lasso_data$molecular=="3 or 4"),]
#lasso_data<-lasso_data[!(lasso_data$molecular=="shh or 3 or 4"),]
#lasso_data<-lasso_data[!(lasso_data$molecular=="?"),]
#head(lasso_data)
count(lasso_data, molecular)
ncol(lasso_data)
inTraining <- createDataPartition(lasso_data$molecular, p = 0.70, list = FALSE)
training <- lasso_data[inTraining,]
testing <- lasso_data[-inTraining,]
count(lasso_data, molecular)
count(training, molecular)
count(testing, molecular)
#need to customize column range to match number of features
dimcol <- ncol(lasso_data) #check
x <- (training[, 2:dimcol])
#formats features to dataframe
x_final.df <- data.frame(x)
x_final <- model.matrix( ~., x_final.df)
x_final <- x_final[,-1] #remove intercept
#extract output data, stored in column 1
y <- training[, 1]
#formats output to data frame
y_final <- data.matrix(y)
#LASSO
print('Training Dataset -  LASSO Multi Classification')
cvfit = cv.glmnet(x_final, y_final, family = "multinomial", nfolds = 10, alpha = 1, keep = TRUE)
cvfit
plot(cvfit)
#Set up matrix to collect predicted coefficients
#rows matching the number of columns in x_final i.e. the number of features
#need to add 1 because there is an intercept generated with "Coefficients" in the loop
AllCoeffs = sparseMatrix(ncol(x_final)+1,1)
AllErrors <-matrix() # rows = length of lambda stored in "cvm"; default i 100. col = # of seeds
for (i in 1:100) {
print(i)
set.seed(i)
cvfit = cv.glmnet(x_final, y_final, family = "multinomial", alpha = 1, nfolds = 10)
Coefficients <- coef(cvfit, s = cvfit$lambda.min) #yields Coefficients for given cycle
coeffs <- Coefficients[["1"]]
Active.Indices <- which(coeffs !=0)
Active.Coeffs <- coeffs[Active.Indices]
AllCoeffs <- cbind(AllCoeffs, coeffs)
cvfit$cvm <- append(cvfit$cvm,i)
AllErrors <- qpcR:::cbind.na(AllErrors, cvfit$cvm)
}
AllCoeffs
write.csv(as.data.frame(as.matrix(AllCoefficients1)), file = "~/Desktop/LASSO_multi_features.csv") ## may not write if path is incorrect
write.csv(as.data.frame(as.matrix(AllCoefficients)), file = "~/Desktop/LASSO_multi_features.csv") ## may not write if path is incorrect
write.csv(as.data.frame(as.matrix(AllCoeffs)), file = "~/Desktop/LASSO_multi_features.csv") ## may not write if path is incorrect
write.csv(as.data.frame(as.matrix(AllErrors)), file = "~/Desktop/LASSO_multi_errors.csv")
---
title: "LASSO code"
output: pdf_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
```{r}
remove(list = ls())
library(glmnet)
library(caret)
library(MLeval)
library(qpcR)
library(readxl)
library(dplyr)
library(ggplot2)
library(GGally)
library(pROC)
library(gbm)
set.seed(500)
```
```{r}
## DATA set up for LASSO TRAIN
lasso_data <- read_excel("~/Desktop/peds_tumor/mbpyradiomics/molec_classifier/3way/mb_t1_t2_3way.xlsx")
lasso_data[,"molec_id"]  <- NULL
lasso_data[,"seg_id"]  <- NULL
lasso_data[,"dx_date"]  <- NULL
lasso_data[,"alive"]  <- NULL
lasso_data[,"os"]  <- NULL
lasso_data[,"pfs"]  <- NULL
lasso_data$sex[lasso_data$sex == "M"] <- "0"
lasso_data$sex[lasso_data$sex == "F"] <- "1"
lasso_data$sex <- as.factor(lasso_data$sex)
#View(lasso_data)
#lasso_data<-lasso_data[!(lasso_data$molecular=="3 or 4"),]
#lasso_data<-lasso_data[!(lasso_data$molecular=="shh or 3 or 4"),]
#lasso_data<-lasso_data[!(lasso_data$molecular=="?"),]
#head(lasso_data)
count(lasso_data, molecular)
ncol(lasso_data)
inTraining <- createDataPartition(lasso_data$molecular, p = 0.70, list = FALSE)
training <- lasso_data[inTraining,]
testing <- lasso_data[-inTraining,]
count(lasso_data, molecular)
count(training, molecular)
count(testing, molecular)
```
```{r}
#need to customize column range to match number of features
dimcol <- ncol(lasso_data) #check
x <- (training[, 2:dimcol])
#formats features to dataframe
x_final.df <- data.frame(x)
x_final <- model.matrix( ~., x_final.df)
x_final <- x_final[,-1] #remove intercept
```
```{r}
#extract output data, stored in column 1
y <- training[, 1]
#formats output to data frame
y_final <- data.matrix(y)
```
```{r}
#LASSO
print('Training Dataset -  LASSO Multi Classification')
cvfit = cv.glmnet(x_final, y_final, family = "multinomial", nfolds = 10, alpha = 1, keep = TRUE)
cvfit
plot(cvfit)
```
```{r}
#Set up matrix to collect predicted coefficients
#rows matching the number of columns in x_final i.e. the number of features
#need to add 1 because there is an intercept generated with "Coefficients" in the loop
AllCoeffs = sparseMatrix(ncol(x_final)+1,1)
AllErrors <-matrix() # rows = length of lambda stored in "cvm"; default i 100. col = # of seeds
for (i in 1:100) {
print(i)
set.seed(i)
cvfit = cv.glmnet(x_final, y_final, family = "multinomial", alpha = 1, nfolds = 10)
Coefficients <- coef(cvfit, s = cvfit$lambda.min) #yields Coefficients for given cycle
coeffs <- Coefficients[["1"]]
Active.Indices <- which(coeffs !=0)
Active.Coeffs <- coeffs[Active.Indices]
AllCoeffs <- cbind(AllCoeffs, coeffs)
cvfit$cvm <- append(cvfit$cvm,i)
AllErrors <- qpcR:::cbind.na(AllErrors, cvfit$cvm)
}
```
```{r}
write.csv(as.data.frame(as.matrix(AllCoeffs)), file = "~/Desktop/LASSO_multi_features.csv") ## may not write if path is incorrect
write.csv(as.data.frame(as.matrix(AllErrors)), file = "~/Desktop/LASSO_multi_errors.csv")
```
---
title: "LASSO code"
output: pdf_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
```{r}
remove(list = ls())
library(glmnet)
library(caret)
library(MLeval)
library(qpcR)
library(readxl)
library(dplyr)
library(ggplot2)
library(GGally)
library(pROC)
library(gbm)
set.seed(500)
remove(list = ls())
library(glmnet)
library(caret)
library(MLeval)
library(qpcR)
library(readxl)
library(dplyr)
library(ggplot2)
library(GGally)
library(pROC)
library(gbm)
set.seed(500)
```{r}
## DATA set up for LASSO TRAIN
lasso_data <- read_excel("~/Desktop/peds_tumor/mbpyradiomics/molec_classifier/3way/mb_t1_t2_3way.xlsx")
lasso_data[,"molec_id"]  <- NULL
lasso_data[,"seg_id"]  <- NULL
lasso_data[,"dx_date"]  <- NULL
lasso_data[,"alive"]  <- NULL
lasso_data[,"os"]  <- NULL
lasso_data[,"pfs"]  <- NULL
lasso_data$sex[lasso_data$sex == "M"] <- "0"
lasso_data$sex[lasso_data$sex == "F"] <- "1"
lasso_data$sex <- as.factor(lasso_data$sex)
View(lasso_data)
#head(lasso_data)
count(lasso_data, molecular)
ncol(lasso_data)
#head(lasso_data)
count(lasso_data, molecular)
inTraining <- createDataPartition(lasso_data$molecular, p = 0.70, list = FALSE)
training <- lasso_data[inTraining,]
testing <- lasso_data[-inTraining,]
count(lasso_data, molecular)
count(training, molecular)
count(testing, molecular)
count(training, molecular)
count(testing, molecular)
#need to customize column range to match number of features
dimcol <- ncol(lasso_data) #check
x <- (training[, 2:dimcol])
#formats features to dataframe
x_final.df <- data.frame(x)
x_final <- model.matrix( ~., x_final.df)
x_final <- model.matrix( ~., x_final.df)
x_final <- x_final[,-1] #remove intercept
#extract output data, stored in column 1
y <- training[, 1]
#formats output to data frame
y_final <- data.matrix(y)
#formats output to data frame
y_final <- data.matrix(y)
View(y_final)
View(x_final)
#extract output data, stored in column 1
y <- training[, 1]
#formats output to data frame
y_final <- data.matrix(y)
View(y)
#formats output to data frame
y_final <- as.matrix(y)
View(y_final)
#formats output to data frame
y_final <- as.matrix(y)
View(y_final)
#LASSO
print('Training Dataset -  LASSO Multi Classification')
cvfit = cv.glmnet(x_final, y_final, family = "multinomial", nfolds = 10, alpha = 1, keep = TRUE)
cvfit = cv.glmnet(x_final, y_final, family = "multinomial", nfolds = 10, alpha = 1, keep = TRUE)
cvfit
plot(cvfit)
#Set up matrix to collect predicted coefficients
#rows matching the number of columns in x_final i.e. the number of features
#need to add 1 because there is an intercept generated with "Coefficients" in the loop
AllCoeffs = sparseMatrix(ncol(x_final)+1,1)
AllErrors <-matrix() # rows = length of lambda stored in "cvm"; default i 100. col = # of seeds
for (i in 1:100) {
print(i)
set.seed(i)
cvfit = cv.glmnet(x_final, y_final, family = "multinomial", alpha = 1, nfolds = 10)
Coefficients <- coef(cvfit, s = cvfit$lambda.min) #yields Coefficients for given cycle
coeffs <- Coefficients[["1"]]
Active.Indices <- which(coeffs !=0)
Active.Coeffs <- coeffs[Active.Indices]
AllCoeffs <- cbind(AllCoeffs, coeffs)
cvfit$cvm <- append(cvfit$cvm,i)
AllErrors <- qpcR:::cbind.na(AllErrors, cvfit$cvm)
}
View(AllCoeffs)
head(AllCoeffs)
remove(list = ls())
library(glmnet)
library(caret)
library(MLeval)
library(qpcR)
library(readxl)
library(dplyr)
library(ggplot2)
library(GGally)
library(pROC)
library(gbm)
set.seed(500)
## DATA set up for LASSO TRAIN
lasso_data <- read_excel("~/Desktop/peds_tumor/mbpyradiomics/molec_classifier/3way/mb_t1_t2_3way.xlsx")
lasso_data[,"molec_id"]  <- NULL
lasso_data[,"seg_id"]  <- NULL
lasso_data[,"dx_date"]  <- NULL
lasso_data[,"alive"]  <- NULL
lasso_data[,"os"]  <- NULL
lasso_data[,"pfs"]  <- NULL
lasso_data$sex[lasso_data$sex == "M"] <- "0"
lasso_data$sex[lasso_data$sex == "F"] <- "1"
lasso_data$sex <- as.factor(lasso_data$sex)
View(lasso_data)
#lasso_data<-lasso_data[!(lasso_data$molecular=="3 or 4"),]
#lasso_data<-lasso_data[!(lasso_data$molecular=="shh or 3 or 4"),]
#lasso_data<-lasso_data[!(lasso_data$molecular=="?"),]
#head(lasso_data)
count(lasso_data, molecular)
ncol(lasso_data)
inTraining <- createDataPartition(lasso_data$molecular, p = 0.70, list = FALSE)
training <- lasso_data[inTraining,]
testing <- lasso_data[-inTraining,]
count(lasso_data, molecular)
count(training, molecular)
count(testing, molecular)
#need to customize column range to match number of features
dimcol <- ncol(lasso_data) #check
x <- (training[, 2:dimcol])
#formats features to dataframe
x_final.df <- data.frame(x)
x_final <- model.matrix( ~., x_final.df)
x_final <- x_final[,-1] #remove intercept
View(x_final)
#extract output data, stored in column 1
y <- training[, 1]
#formats output to data frame
y_final <- data.matrix(y)
View(y_final)
View(y)
(y)
y <- as.factor(y)
y
#extract output data, stored in column 1
y <- training[, 1]
View(y)
y <- as.factor(y$molecular)
y
#formats output to data frame
y_final <- data.matrix(y)
y_final
View(y_final)
#LASSO
print('Training Dataset -  LASSO Multi Classification')
cvfit = cv.glmnet(x_final, y_final, family = "multinomial", nfolds = 10, alpha = 1, keep = TRUE)
cvfit
plot(cvfit)
#Set up matrix to collect predicted coefficients
#rows matching the number of columns in x_final i.e. the number of features
#need to add 1 because there is an intercept generated with "Coefficients" in the loop
AllCoeffs = sparseMatrix(ncol(x_final)+1,1)
AllErrors <-matrix() # rows = length of lambda stored in "cvm"; default i 100. col = # of seeds
for (i in 1:10) {
print(i)
set.seed(i)
cvfit = cv.glmnet(x_final, y_final, family = "multinomial", alpha = 1, nfolds = 10)
Coefficients <- coef(cvfit, s = cvfit$lambda.min) #yields Coefficients for given cycle
coeffs <- Coefficients[["1"]]
Active.Indices <- which(coeffs !=0)
Active.Coeffs <- coeffs[Active.Indices]
AllCoeffs <- cbind(AllCoeffs, coeffs)
cvfit$cvm <- append(cvfit$cvm,i)
AllErrors <- qpcR:::cbind.na(AllErrors, cvfit$cvm)
}
#Set up matrix to collect predicted coefficients
#rows matching the number of columns in x_final i.e. the number of features
#need to add 1 because there is an intercept generated with "Coefficients" in the loop
AllCoeffs = sparseMatrix(ncol(x_final)+1,1)
AllErrors <-matrix() # rows = length of lambda stored in "cvm"; default i 100. col = # of seeds
for (i in 1:3) {
print(i)
set.seed(i)
cvfit = cv.glmnet(x_final, y_final, family = "multinomial", alpha = 1, nfolds = 10)
Coefficients <- coef(cvfit, s = cvfit$lambda.min) #yields Coefficients for given cycle
coeffs <- Coefficients[["V1"]]
Active.Indices <- which(coeffs !=0)
Active.Coeffs <- coeffs[Active.Indices]
AllCoeffs <- cbind(AllCoeffs, coeffs)
cvfit$cvm <- append(cvfit$cvm,i)
AllErrors <- qpcR:::cbind.na(AllErrors, cvfit$cvm)
}
write.csv(as.data.frame(as.matrix(AllCoeffs)), file = "~/Desktop/LASSO_multi_features.csv") ## may not write if path is incorrect
AllCoeffs
#Set up matrix to collect predicted coefficients
#rows matching the number of columns in x_final i.e. the number of features
#need to add 1 because there is an intercept generated with "Coefficients" in the loop
AllCoeffs = sparseMatrix(ncol(x_final)+1,1)
AllErrors <-matrix() # rows = length of lambda stored in "cvm"; default i 100. col = # of seeds
for (i in 1:3) {
print(i)
set.seed(i)
cvfit = cv.glmnet(x_final, y_final, family = "multinomial", alpha = 1, nfolds = 10)
Coefficients <- coef(cvfit, s = cvfit$lambda.min) #yields Coefficients for given cycle
coeffs <- Coefficients[["1"]]
Active.Indices <- which(coeffs !=0)
Active.Coeffs <- coeffs[Active.Indices]
AllCoeffs <- cbind(AllCoeffs, coeffs)
cvfit$cvm <- append(cvfit$cvm,i)
AllErrors <- qpcR:::cbind.na(AllErrors, cvfit$cvm)
}
AllCoeffs
AllCoeffs
Coefficients <- coef(cvfit, s = cvfit$lambda.min) #yields Coefficients for given cycle
Coefficients
Coefficients[["1"]]
Coefficients[["1"]]
Coefficients[[1]]
#Set up matrix to collect predicted coefficients
#rows matching the number of columns in x_final i.e. the number of features
#need to add 1 because there is an intercept generated with "Coefficients" in the loop
AllCoeffs = sparseMatrix(ncol(x_final)+1,1)
AllErrors <-matrix() # rows = length of lambda stored in "cvm"; default i 100. col = # of seeds
for (i in 1:3) {
print(i)
set.seed(i)
cvfit = cv.glmnet(x_final, y_final, family = "multinomial", alpha = 1, nfolds = 10)
Coefficients <- coef(cvfit, s = cvfit$lambda.min) #yields Coefficients for given cycle
coeffs <- Coefficients[[1]]
Active.Indices <- which(coeffs !=0)
Active.Coeffs <- coeffs[Active.Indices]
AllCoeffs <- cbind(AllCoeffs, coeffs)
cvfit$cvm <- append(cvfit$cvm,i)
AllErrors <- qpcR:::cbind.na(AllErrors, cvfit$cvm)
}
AllCoeffs
write.csv(as.data.frame(as.matrix(AllCoeffs)), file = "~/Desktop/LASSO_multi_features.csv") ## may not write if path is incorrect
#Set up matrix to collect predicted coefficients
#rows matching the number of columns in x_final i.e. the number of features
#need to add 1 because there is an intercept generated with "Coefficients" in the loop
AllCoeffs = sparseMatrix(ncol(x_final)+1,1)
AllErrors <-matrix() # rows = length of lambda stored in "cvm"; default i 100. col = # of seeds
for (i in 1:100) {
print(i)
set.seed(i)
cvfit = cv.glmnet(x_final, y_final, family = "multinomial", alpha = 1, nfolds = 10)
Coefficients <- coef(cvfit, s = cvfit$lambda.min) #yields Coefficients for given cycle
coeffs <- Coefficients[[1]]
Active.Indices <- which(coeffs !=0)
Active.Coeffs <- coeffs[Active.Indices]
AllCoeffs <- cbind(AllCoeffs, coeffs)
cvfit$cvm <- append(cvfit$cvm,i)
AllErrors <- qpcR:::cbind.na(AllErrors, cvfit$cvm)
}
write.csv(as.data.frame(as.matrix(AllCoeffs)), file = "~/Desktop/LASSO_multi_features.csv") ## may not write if path is incorrect
remove(list = ls())
library(glmnet)
library(caret)
library(MLeval)
library(qpcR)
library(readxl)
library(dplyr)
library(ggplot2)
library(GGally)
library(pROC)
library(gbm)
set.seed(500)
## DATA set up for LASSO TRAIN
lasso_data <- read_excel("~/Desktop/peds_tumor/mbpyradiomics/molec_classifier/binary/wnt_rest.xlsx")
lasso_data[,"molec_id"]  <- NULL
lasso_data[,"seg_id"]  <- NULL
lasso_data[,"dx_date"]  <- NULL
lasso_data[,"alive"]  <- NULL
lasso_data[,"os"]  <- NULL
lasso_data[,"pfs"]  <- NULL
lasso_data$sex[lasso_data$sex == "M"] <- "0"
lasso_data$sex[lasso_data$sex == "F"] <- "1"
lasso_data$sex <- as.factor(lasso_data$sex)
View(lasso_data)
#lasso_data<-lasso_data[!(lasso_data$molecular=="3 or 4"),]
#lasso_data<-lasso_data[!(lasso_data$molecular=="shh or 3 or 4"),]
#lasso_data<-lasso_data[!(lasso_data$molecular=="?"),]
#head(lasso_data)
count(lasso_data, molecular)
ncol(lasso_data)
inTraining <- createDataPartition(lasso_data$molecular, p = 0.70, list = FALSE)
training <- lasso_data[inTraining,]
testing <- lasso_data[-inTraining,]
count(lasso_data, molecular)
count(training, molecular)
count(testing, molecular)
#need to customize column range to match number of features
dimcol <- ncol(lasso_data) #check
x <- (training[, 2:dimcol])
#formats features to dataframe
x_final.df <- data.frame(x)
x_final <- model.matrix( ~., x_final.df)
x_final <- x_final[,-1] #remove intercept
#View(x_final)
#extract output data, stored in column 1
y <- training[, 1]
y <- as.factor(y$molecular)
#formats output to data frame
y_final <- data.matrix(y)
#View(y_final)
#LASSO
print('Training Dataset -  LASSO Multi Classification')
cvfit = cv.glmnet(x_final, y_final, family = "multinomial", nfolds = 10, alpha = 1, keep = TRUE)
cvfit
plot(cvfit)
#Set up matrix to collect predicted coefficients
#rows matching the number of columns in x_final i.e. the number of features
#need to add 1 because there is an intercept generated with "Coefficients" in the loop
AllCoeffs = sparseMatrix(ncol(x_final)+1,1)
AllErrors <-matrix() # rows = length of lambda stored in "cvm"; default i 100. col = # of seeds
for (i in 1:100) {
print(i)
set.seed(i)
cvfit = cv.glmnet(x_final, y_final, family = "multinomial", alpha = 1, nfolds = 10)
Coefficients <- coef(cvfit, s = cvfit$lambda.min) #yields Coefficients for given cycle
coeffs <- Coefficients[[1]]
Active.Indices <- which(coeffs !=0)
Active.Coeffs <- coeffs[Active.Indices]
AllCoeffs <- cbind(AllCoeffs, coeffs)
cvfit$cvm <- append(cvfit$cvm,i)
AllErrors <- qpcR:::cbind.na(AllErrors, cvfit$cvm)
}
write.csv(as.data.frame(as.matrix(AllCoeffs)), file = "~/Desktop/LASSO_multi_features.csv") ## may not write if path is incorrect
AllCoeffs
